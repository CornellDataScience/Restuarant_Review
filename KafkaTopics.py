import KafkaConsumers
from YelpRealTime import getReviewCount
from Yelp_Realtime_Scraper import scrapeYelp
import dbms
import Zomato_Scrapper
import datetime

def update_yelp(df):
    print('Updating at: ' + str(datetime.datetime.now()))
    getReviewCount()
    newReviewCount = KafkaConsumers.consume_topic1_message()
    df = dbms.initialize_yelp()
    currentReviewCount = dbms.get_restaurant_counts(df)
    scraping_list = {}
    for review in newReviewCount:
        try:
            currentReviewCount[review]
            diff = newReviewCount[review][0] - currentReviewCount[review]
            if(diff > 0):
                scraping_list[review] = [diff,newReviewCount[review][1]]
        except:
            pass
    review_dict = scrapeYelp(scraping_list)
    print('New Reviews found: '+ str(review_dict))
    df = dbms.add_rows(df,review_dict)
    dbms.save_yelp(df)

def update_zomato(df):
    #Zomato_Scrapper.scrape_all_review_ID()
    print('reviews scraped and sent')
    ReviewIDs = {'17420003': [30835516, 27917652, 27917217, 23938175, 20821948], '17419914': [37926510, 35755165, 34850652, 24460866, 24290003], '17419970': [36838302, 33564282, 29295522, 23938152, 20821708], '17419894': [29882012, 20821363, 20821360, 20821357, 20821354], '17420079': [36601463, 29446739, 26146192, 23938003, 23870615], '17419996': [29578586, 26478750, 24521106, 20821912, 20821909], '17420574': [24571168, 24460877, 23671317, 20824807, 20824804], '17419959': [31535521, 27917231, 27218141, 26432925, 20821591], '17420067': [24327734, 23937653, 20822194, 20822191, 20822188], '17420023': [31577577, 27924229, 25022335, 23937638, 23935730], '17420654': [], '17419990': [23937958, 20821792, 20821789, 20821783, 20821780], '17419947': [30213950, 26053359, 20821513, 20821510, 20821507], '17420088': [20822383, 20822380, 20822377, 20822374, 20822371], '17419904': [24766946, 20821414, 20821411, 20821408, 20821405], '17419991': [27922043, 24721954, 20821819, 20821813, 20821810], '17420501': [27503236, 20824171, 20824168, 20824165, 20824162], '17420066': [23937718, 20822164, 20822161, 20822158, 20822155], '17420055': [23938132, 23870608, 20822140, 20822137, 20822134], '17420042': [26838776, 23937553, 20822047, 20822044, 20822041], '17419899': [24993704, 20821384, 20821381, 20821378, 20821375], '17419966': [20821651, 20821648, 20821642, 20821639, 20821636], '17420523': [23937526, 23454647, 20824372, 20824369, 20824366], '17420442': [35062545, 20823688, 20823685, 20823682, 20823679], '17420487': [23937622, 20824048, 20824045, 20824042, 20824039], '17420496': [25083622, 20824111, 20824108, 20824105, 20824102], '17420516': [24684130, 20824324, 20824321, 20824318, 20824315], '17420566': [27503159, 25818451, 20824750, 20824747, 20824744], '17419953': [25754357, 23938056, 20821540, 20821537, 20821534], '17420049': [35019824, 20822083, 20822080, 20822077, 20822074], '17419874': [23938041, 20821228, 20821225, 20821222, 20821219], '17420052': [27218119, 20822095, 20822092, 20822089, 20822086], '17420078': [40902893, 24327755, 23938027, 20822302, 20822299], '17419876': [24552211, 20821240, 20821237, 20821234, 20821231], '17419995': [20821864, 20821861, 20821858, 20821855, 20821852], '17419944': [40902927, 20821492, 20821489, 20821486], '17420515': [34851052, 29348024, 24327791, 23937918, 20824312], '17420499': [27032539, 20824141, 20824138, 20824135, 20824132], '17420007': [34851025, 23937933, 20821954], '17419924': [23937768, 20821468, 20821465], '17419965': [23937804, 20821630, 20821627], '17420530': [37926575, 20824417, 20824414, 20824411], '17420032': [20822017, 20822014], '17419881': [20821258, 20821255, 20821252, 20821249], '17420730': [28402901, 24596703, 23454657, 20825149], '17420600': [23928695, 20824975, 20824972, 20824969], '17420414': [20823442], '17420598': [29326493, 20824966, 20824963], '17420569': [23937987, 20824762, 20824759, 20824756, 20824753], '17420081': [20822347], '17419951': [29578611, 20821519, 20821516], '17420485': [20823997, 20823994, 20823991], '17420691': [29721840, 26511751, 20825122], '17420528': [20824393, 20824390, 20824387], '17420021': [20821975], '17420076': [20822290, 20822287], '17420640': [25022328, 24327772, 20825065], '17420085': [20822356, 20822353, 20822350], '17419884': [20821261], '17420004': [23937851], '17420424': [25943559, 24483317, 20823478, 20823475], '17420614': [29446758], '17420019': [23937844, 20821972], '17419902': [20821396, 20821393, 20821390, 20821387], '17420595': [24883517, 20824939, 20824936], '17419937': [], '17420537': [23937828, 20824495, 20824492, 20824489, 20824486], '17420037': [39010133, 23937895, 20822029], '17420006': [23937596, 20821951], '17419882': [24327831], '17420715': [25990949, 23454653, 20825131], '17420035': [20822023], '17419974': [24848169, 20821714, 20821711], '17419955': [20821543], '17419940': [24278708, 20821483], '17419877': [20821246, 20821243], '17420012': [23937584], '17420469': [20823907, 20823904], '17420443': [20823694, 20823691], '17795583': [26900054, 24766903, 24673968, 23671318], '17419910': [20821423, 20821420], '17419982': [20821735], '17420001': [24327811], '17420036': [20822026], '17420411': [26198495, 20823373, 20823370], '17419987': [20821747], '17866936': [35755465, 30701885], '17420029': [20822008], '17420481': [20823988], '17419878': [23938083], '17419963': [20821621, 20821618], '17419964': [26948294, 20821624], '17420729': [26588439, 24531104], '17419984': [20821744], '17866933': [28938923], '17420075': [20822284], '17420727': [42216326, 26323053], '17419998': [20821915], '17419901': [23946136], '17419983': [20821741, 20821738], '17420039': [20822032], '17420557': [20824702], '17420043': [23928669], '17420722': [25834814], '17420599': [], '17420034': [23937870, 20822020], '17420642': [20825071, 20825068], '17420664': [20825113], '17420638': [23454650], '17420586': [20824873], '17795536': [34851068], '18012528': [24750136], '17419962': [26900099], '17420724': [24460893], '17420639': [], '17866923': [27751290], '17839802': [35755446], '17757737': [24585905], '17419934': [20821477], '17420723': [24460853], '17757735': [23937572], '17420491': [20824087], '17420716': [20825134], '17795561': [23938067], '18433192': [30180694]}
    #KafkaConsumers.consume_topic2_message()
    print('Here is ReviewIDs')
    print(ReviewIDs)
    recent_review_dict = dbms.get_top_5_review_ids(df)
    ReviewDict = {}
    print('Comparing Reviews')
    for rest in ReviewIDs:
        countToScrape = 0
        if(len(ReviewIDs.get(rest)) > 0):

            IDList = ReviewIDs.get(rest)
            lenList = len(IDList)
            lastID = IDList[lenList-1]
            currentReviewList = recent_review_dict.get(rest)
            for id in currentReviewList:
                if(id == lastID):
                    break
                countToScrape += 1
            ReviewDict.update(Zomato_Scrapper.scrape_latest_reviews(2,rest))
    df = dbms.add_rows(df,ReviewDict)
    dbms.save_zomato(df)
